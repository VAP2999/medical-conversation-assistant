from datetime import datetime
import re

def generate_doctor_summary(messages, symptom_data):
    """Generate a structured summary for healthcare providers"""
    
    # Extract user messages only
    user_messages = [msg['content'] for msg in messages if msg['role'] == 'user']
    
    summary = f"""PATIENT PREPARATION SUMMARY
Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M')}

CHIEF CONCERNS:
"""
    
    # Add main symptoms/concerns
    if user_messages:
        summary += f"• {user_messages[0]}\n"
        if len(user_messages) > 1:
            for msg in user_messages[1:3]:  # Add up to 2 more key messages
                summary += f"• {msg}\n"
    
    summary += "\nSYMPTOM DETAILS:\n"
    
    # Add structured symptom information
    if symptom_data:
        for key, value in symptom_data.items():
            if key not in ['reported_at', 'description']:
                summary += f"• {key.capitalize()}: {value}\n"
    
    summary += f"""
TIMELINE:
• Symptoms discussed during preparation conversation
• Patient used digital tool to organize thoughts before visit

PATIENT COMMUNICATION PREFERENCES:
• Patient prepared questions and concerns in advance
• Expressed desire for clear medical explanation

NOTE: This summary was generated by a patient preparation tool. 
Patient has been advised that only healthcare professionals can provide medical diagnoses and treatment recommendations.
"""
    
    return summary

def detect_urgency_level(symptom_data):
    """Assess urgency level based on symptom descriptions"""
    
    # High urgency indicators
    high_urgency_keywords = [
        'chest pain', 'trouble breathing', 'can\'t breathe', 'severe pain',
        'blood', 'bleeding', 'unconscious', 'seizure', 'stroke',
        'heart attack', 'emergency', 'urgent', 'unbearable'
    ]
    
    # Medium urgency indicators
    medium_urgency_keywords = [
        'fever', 'infection', 'worsening', 'getting worse',
        'persistent', 'weeks', 'concerning', 'worried'
    ]
    
    # Combine all symptom descriptions
    all_text = ""
    for key, value in symptom_data.items():
        if isinstance(value, str):
            all_text += value.lower() + " "
    
    # Check for high urgency
    for keyword in high_urgency_keywords:
        if keyword in all_text:
            return "high"
    
    # Check for medium urgency
    for keyword in medium_urgency_keywords:
        if keyword in all_text:
            return "medium"
    
    return "low"

def analyze_conversation_patterns(messages):
    """Analyze conversation for research insights"""
    
    analysis = {
        'total_exchanges': len([msg for msg in messages if msg['role'] == 'user']),
        'avg_message_length': 0,
        'emotional_indicators': 0,
        'question_count': 0,
        'collaborative_elements': 0
    }
    
    user_messages = [msg['content'] for msg in messages if msg['role'] == 'user']
    
    if user_messages:
        # Average message length
        total_length = sum(len(msg.split()) for msg in user_messages)
        analysis['avg_message_length'] = total_length / len(user_messages)
        
        # Count emotional indicators
        emotional_words = ['worried', 'scared', 'anxious', 'concerned', 'frustrated']
        for msg in user_messages:
            for word in emotional_words:
                if word in msg.lower():
                    analysis['emotional_indicators'] += 1
        
        # Count questions
        for msg in user_messages:
            analysis['question_count'] += msg.count('?')
        
        # Count collaborative elements (when user builds on AI suggestions)
        collaborative_phrases = ['yes', 'also', 'and', 'but also', 'in addition']
        for msg in user_messages:
            for phrase in collaborative_phrases:
                if phrase in msg.lower():
                    analysis['collaborative_elements'] += 1
    
    return analysis

def get_personalization_insights(communication_style, anxiety_level, conversation_length):
    """Generate insights about personalization effectiveness"""
    
    insights = []
    
    if anxiety_level >= 4 and conversation_length > 3:
        insights.append("High anxiety level maintained engagement through conversation")
    
    if communication_style == "Empathetic & Gentle" and conversation_length > 5:
        insights.append("Empathetic communication style encouraged longer interaction")
    
    if communication_style == "Direct & Factual" and conversation_length <= 3:
        insights.append("Direct style led to efficient, focused conversation")
    
    return insights

def validate_human_agency_preservation(messages):
    """Check if human agency was properly preserved in conversation"""
    
    ai_messages = [msg['content'] for msg in messages if msg['role'] == 'assistant']
    
    agency_indicators = [
        'doctor', 'healthcare provider', 'medical professional',
        'not a diagnosis', 'consult', 'expert assessment',
        'your choice', 'you decide'
    ]
    
    agency_count = 0
    for msg in ai_messages:
        for indicator in agency_indicators:
            if indicator in msg.lower():
                agency_count += 1
    
    # Should have agency preservation in at least 50% of AI messages
    if len(ai_messages) > 0:
        agency_ratio = agency_count / len(ai_messages)
        return agency_ratio >= 0.5
    
    return True